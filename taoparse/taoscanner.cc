
#line 3 "taoscanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 150
#define YY_END_OF_BUFFER 151
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[727] =
    {   0,
        0,    0,  151,  150,  126,  127,  150,  150,  144,  145,
      133,  134,  142,  140,  129,  141,  138,  143,   86,  137,
      130,  123,  139,  123,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  135,
      136,  148,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      131,  146,  132,  147,  126,  124,    0,  120,  125,  121,
        0,    0,   87,    0,   86,  122,  123,  122,  119,  119,
      119,  100,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  115,  107,  119,  119,  119,  119,  119,

      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  112,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,   84,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  111,  119,  149,    0,  128,   87,   89,  119,
      119,  119,  119,    8,  119,  119,  119,  119,  119,  119,
      119,  110,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,   83,  119,  119,  119,  119,  119,  119,  119,

      119,  119,  119,  119,   75,  119,   90,  119,  119,  119,
       99,   90,  119,  119,  119,  101,  119,  119,  119,  119,
      119,   90,  116,  119,  119,  119,   85,  119,  119,   91,
      119,  119,  119,  119,  119,  119,  116,  119,   90,  119,
      119,  119,  119,   90,   88,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  108,  119,   21,  102,  119,
       94,  119,   45,  119,  119,  119,  119,  119,  119,  119,
      119,   11,  119,   96,   95,  119,   90,  119,  119,  119,
      119,  119,  119,   90,   90,  119,  119,  119,   90,  119,
       72,  119,  119,  119,  119,  119,  119,  119,  119,  119,

      119,  119,  119,  119,  119,  119,  119,  119,  119,   32,
      119,  116,   15,  119,  119,  119,  119,   16,    2,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  117,  119,  104,    1,  119,  119,
      119,  119,  119,  119,  119,  105,  119,  119,   46,  119,
       17,  113,   22,  119,   97,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,   78,  119,   93,
      118,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,   71,  119,  119,  119,

      119,  119,  119,  119,  119,  119,  119,  119,   98,  119,
      119,  119,  103,    6,  119,  119,  119,  119,  109,    9,
      119,   12,  119,   18,    3,  119,  119,  119,  119,   82,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,   92,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,   47,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,   14,  119,
      119,  119,  119,   19,    5,   20,  119,  119,  119,  119,
      119,  119,   79,  119,  119,  119,  119,  119,  119,  119,

      119,  119,  119,   54,  119,   50,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,   35,   23,  119,  119,
       40,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,   62,  119,  119,  119,  119,
      119,  119,  119,  119,    7,   48,  119,  119,   80,  119,
      119,  119,   74,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,   39,   33,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,   29,
       73,  119,  119,  119,  119,  119,  119,  119,  119,   13,
      119,   10,  119,    4,  119,  119,  119,   60,  119,  119,

      119,   56,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,   34,  119,  119,  119,  119,  119,  119,
      119,   70,  119,  119,  119,   67,  119,  119,  119,  119,
      119,  119,  119,   77,  119,   49,   57,   55,  119,  119,
      119,  119,  119,  119,  119,  119,  119,   36,  119,  119,
      119,   41,   42,  119,  119,  119,   30,   28,   66,  119,
      119,  119,  119,  119,  119,  114,  106,   81,   58,  119,
      119,  119,  119,   53,   51,  119,  119,   38,  119,  119,
       43,  119,  119,   68,  119,  119,  119,   63,   64,  119,
      119,  119,  119,  119,  119,  119,  119,   44,   31,  119,

      119,  119,  119,   76,  119,   59,   25,   26,   37,  119,
      119,  119,   69,  119,  119,  119,  119,  119,   52,  119,
       61,   65,  119,   24,   27,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    7,    1,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   21,   21,   21,   21,   22,   23,   24,
       25,   26,    1,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       37,   43,   44,   45,   37,   46,   37,   47,   48,   37,
       49,    1,   50,   51,   37,    1,   52,   53,   54,   55,

       56,   57,   58,   59,   60,   37,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[81] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    2,    2,    2,    2,
        2,    1,    1,    1,    1,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    1,    1,
        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[730] =
    {   0,
        0,    0,  824,  825,  821,  825,  797,  816,  795,  794,
      825,  825,  793,   70,  825,   69,  803,   68,   70,  825,
      825,   72,  791,   73,   46,   36,   42,    0,   42,   43,
       54,   55,  750,  762,  742,   58,  756,   55,   53,  825,
      825,  786,   68,  745,   80,   67,   67,   88,  753,  733,
      743,   64,   83,   90,   90,   95,  735,  107,  106,  104,
      825,  780,  825,  825,  802,  825,  798,  825,  825,  825,
      788,  798,  161,  167,  175,  775,  825,  774,    0,  744,
      727,    0,  741,  738,  721,  725,   83,  102,  736,  739,
      722,  724,  725,    0,    0,  105,  727,  733,  715,  716,

      713,  722,  727,  715,  721,  132,  144,  718,  134,  722,
      710,  169,  723,  704,  705,  110,  195,  716,  702,  718,
      152,  714,  702,  163,  702,  698,  695,  698,    0,  706,
      698,  148,  697,  696,  703,  685,  687,  693,  685,    0,
      695,  701,  679,  699,  680,  155,  162,  149,  685,  680,
      171,  683,  680,  674,  825,  741,  825,  224,  230,  687,
      686,  681,  675,    0,  685,  158,  674,  677,  680,  667,
      676,    0,  670,  669,  661,  674,  665,  672,  661,  674,
      671,  660,  653,  654,  657,  654,  659,  657,  661,  664,
      646,  654,    0,  651,  644,  659,  656,  649,  644,  643,

      636,  635,  642,  633,    0,  650,  642,  646,  636,  632,
        0,  167,  628,  627,  630,    0,  225,  629,  623,  636,
      630,  673,  620,  623,  633,  624,    0,  632,  630,    0,
      628,  626,  616,  624,  620,  608,  608,  247,  617,  605,
      606,  605,  616,  612,    0,  614,  600,  600,  602,  598,
      603,  608,  595,  592,  595,  625,  584,    0,    0,  602,
        0,  599,    0,  594,  584,  591,  594,  582,  599,  594,
      597,    0,  584,    0,    0,  583,  587,  573,  569,  587,
      579,  571,  570,    0,  109,  574,  198,  570,    0,  567,
        0,  619,  571,  578,  565,  569,  579,  565,  561,  179,

      564,  575,  574,  560,  568,  591,  590,  551,  568,  256,
      237,    0,    0,  550,  558,  561,  560,    0,    0,  543,
      544,  543,  549,  236,  546,  542,  239,  545,  556,  542,
      550,  535,  548,  539,    0,  533,    0,    0,  545,  544,
      545,  533,  541,  527,  538,    0,  526,  537,    0,  522,
        0,    0,    0,  527,    0,  528,  531,  530,  535,  554,
      518,  528,  531,  528,  518,  512,  523,    0,  518,    0,
        0,  512,  513,  507,  522,  505,  512,  201,  238,  508,
      501,  507,  500,  499,  498,  500,  499,  499,  506,  505,
      500,  494,  494,  489,  277,  500,  525,  489,  490,  498,

      483,  498,  481,  488,  487,  239,  477,  483,    0,  479,
      485,  500,    0,    0,  471,  478,  471,  482,    0,    0,
      469,    0,  478,    0,    0,  473,  464,  468,  461,    0,
      459,  471,  457,  457,  461,  472,  453,  469,  465,  452,
      451,  456,  450,  483,  461,  456,  450,  458,  457,    0,
      442,  443,  455,  452,  440,  449,  440,  449,  463,  230,
      447,  446,  441,    0,  250,  429,  433,  446,  443,  424,
      440,  436,  423,  428,  422,  455,  429,  423,    0,  417,
      421,  420,  441,    0,    0,    0,  421,  426,  425,  412,
      423,  422,    0,  425,  412,  415,  418,  413,  408,  412,

      424,  401,  408,    0,  404,    0,  396,  411,  397,  396,
      392,  397,  391,  389,  398,  398,    0,    0,  399,  390,
        0,  392,  396,  394,  388,  396,  385,  388,  372,  390,
      385,  380,  384,  396,  381,    0,  377,  369,  384,  378,
      376,  367,  382,  377,    0,    0,  378,  367,    0,  360,
      359,  364,    0,  357,  370,  355,  368,  352,  365,  355,
      360,  359,  347,  346,  351,  359,    0,    0,  351,  343,
      377,  339,  345,  339,  349,  341,  354,  335,  340,    0,
        0,  333,  346,  331,  344,  342,  332,  337,  336,    0,
      331,    0,  324,    0,  337,  338,  335,    0,  332,  314,

      319,    0,  325,  323,  325,  332,  318,  312,  325,  324,
      316,  310,  321,    0,  313,  319,  301,  332,  302,  311,
      295,    0,  311,  293,  298,    0,  304,  305,  312,  298,
      292,  291,  304,    0,  284,    0,    0,    0,  289,  292,
      300,  301,  300,  289,  277,  287,  286,    0,  280,  278,
      281,    0,    0,  289,  304,  280,    0,    0,    0,  274,
      277,  287,  286,  275,  263,    0,    0,    0,    0,  283,
      272,  283,  264,    0,    0,  279,  278,    0,  275,  278,
        0,  272,  270,    0,  273,  274,   58,    0,    0,   91,
      135,  151,  165,  161,  162,  188,  208,    0,    0,  203,

      198,  200,  205,    0,  216,    0,    0,    0,    0,  208,
      220,  249,    0,  235,  246,  245,  241,  252,    0,  254,
        0,    0,  255,    0,    0,  825,  320,  321,  323
    } ;

static yyconst flex_int16_t yy_def[730] =
    {   0,
      726,    1,  726,  726,  726,  726,  726,  727,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  726,
      726,  726,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      726,  726,  726,  726,  726,  726,  727,  726,  726,  726,
      726,  729,  726,  726,  726,  726,  726,  726,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,

      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  726,  729,  726,  726,  726,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,

      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,

      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,

      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,

      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,

      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,

      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,    0,  726,  726,  726
    } ;

static yyconst flex_int16_t yy_nxt[906] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   19,   19,   19,   19,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   28,   31,   32,   33,   28,   34,   28,   28,
       35,   36,   37,   38,   39,   28,   28,   28,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       28,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       28,   28,   28,   28,   28,   28,   61,   62,   63,   64,
       70,   70,   72,   73,   74,   75,   75,   75,   75,   75,
       75,   84,   69,   69,   69,   76,   77,   77,   78,   80,

       85,   86,   81,   88,   90,   93,   87,   91,  104,  100,
       92,   95,  107,   89,  105,   82,   83,  101,   96,  130,
      108,  109,  120,  131,  106,  102,  230,  702,  132,   94,
      122,  110,  115,  111,  121,  116,  112,  113,  117,  124,
      123,  118,  133,  139,  119,  136,  166,  134,  141,  125,
      703,  135,  126,  167,  137,  152,  142,  140,  145,  143,
      138,  148,  146,  168,  175,  149,  147,  284,  153,  203,
      169,  154,  150,  204,  176,  151,  158,  158,  158,  158,
      158,  158,  159,  159,  159,  159,  159,  159,   73,   74,
       75,   75,   75,   75,   75,   75,  186,  188,  191,  187,

      195,  221,  237,  192,  704,  222,  189,  209,  196,  197,
      198,  205,  205,  205,  205,  213,  210,  233,  238,  235,
      705,  252,  241,  234,  214,  236,  242,  253,  199,  292,
      376,  293,  205,  706,  377,  707,  708,  205,  243,  158,
      158,  158,  158,  158,  158,  159,  159,  159,  159,  159,
      159,  296,  284,  366,  297,  709,  298,  299,  300,  301,
      440,  710,  711,  302,  303,  367,  304,  712,  713,  441,
      305,  306,  307,  323,  714,  715,  324,  716,  325,  326,
      327,  328,  520,  386,  387,  329,  388,  399,  330,  717,
      403,  400,  331,  389,  404,  442,  474,  390,  391,  521,

      392,  525,  284,  460,  461,  526,  443,  475,  718,  719,
      720,  444,  476,  721,  462,  722,  723,  724,  725,  463,
       67,   67,   79,  156,  156,  701,  700,  699,  698,  697,
      696,  695,  694,  693,  692,  691,  690,  689,  688,  687,
      686,  685,  684,  683,  682,  681,  680,  679,  678,  677,
      676,  675,  674,  673,  672,  671,  670,  669,  668,  667,
      666,  665,  664,  663,  662,  661,  660,  659,  658,  657,
      656,  655,  654,  653,  652,  651,  650,  649,  648,  647,
      646,  645,  644,  643,  642,  641,  640,  639,  638,  637,
      636,  635,  634,  633,  632,  631,  630,  629,  628,  627,

      626,  625,  624,  623,  622,  621,  620,  619,  618,  617,
      616,  615,  614,  613,  612,  611,  610,  609,  608,  607,
      606,  605,  604,  603,  602,  601,  600,  599,  598,  597,
      596,  595,  594,  593,  592,  591,  590,  589,  588,  587,
      586,  585,  584,  583,  582,  581,  580,  579,  578,  577,
      576,  575,  574,  573,  572,  571,  570,  569,  568,  567,
      566,  565,  564,  563,  562,  561,  560,  559,  558,  557,
      556,  555,  554,  553,  552,  551,  550,  549,  548,  547,
      546,  545,  544,  543,  542,  541,  540,  539,  538,  537,
      536,  535,  534,  533,  532,  531,  530,  529,  528,  527,

      524,  523,  522,  519,  518,  517,  516,  515,  514,  513,
      512,  511,  510,  509,  508,  507,  506,  505,  504,  503,
      502,  501,  500,  499,  498,  497,  496,  495,  494,  493,
      492,  491,  490,  489,  488,  487,  486,  485,  484,  483,
      482,  481,  480,  479,  478,  477,  473,  472,  471,  470,
      469,  468,  467,  466,  465,  464,  459,  458,  457,  456,
      455,  454,  453,  452,  451,  450,  449,  448,  447,  446,
      445,  439,  438,  437,  436,  435,  434,  433,  245,  245,
      245,  432,  431,  430,  429,  428,  427,  426,  425,  424,
      423,  422,  421,  420,  419,  418,  417,  416,  415,  414,

      413,  412,  411,  410,  409,  408,  407,  406,  405,  402,
      401,  398,  245,  397,  396,  395,  394,  393,  312,  385,
      230,  384,  383,  382,  381,  380,  379,  378,  375,  374,
      373,  372,  284,  371,  370,  289,  369,  368,  365,  364,
      363,  362,  361,  360,  359,  284,  358,  357,  356,  355,
      354,  353,  352,  351,  350,  349,  348,  347,  346,  345,
      344,  343,  342,  341,  340,  339,  338,  337,  336,  335,
      284,  334,  333,  332,  284,  284,  312,  284,  322,  321,
      320,  319,  318,  317,  316,  315,  314,  313,  312,  311,
      310,  309,  245,  308,  295,  294,  284,  291,  230,  290,

      289,  288,  287,  284,  284,  286,  285,  284,  283,  282,
      281,  280,  279,  278,  277,  276,  275,  274,  273,  272,
      271,  270,  269,  268,  267,  266,  265,  264,  263,  262,
      261,  260,  259,  258,  257,  256,  255,  254,  251,  250,
      249,  248,  247,  157,  246,  245,  244,  240,  239,  232,
      231,  230,  229,   94,   94,  228,  227,  226,  225,  224,
      223,  220,  219,  218,  217,  216,  215,  212,  211,  208,
      207,  206,  202,  201,  200,  194,  193,  190,  185,  184,
      183,  182,  181,  180,  179,  178,  177,  174,  173,  172,
      171,  170,  165,  164,  163,  162,  161,  160,   69,   69,

      157,  155,   68,   65,   69,  144,  129,  128,  127,  114,
       69,  103,   99,   98,   97,   66,   71,   69,   69,   69,
       68,   66,   65,  726,    3,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,

      726,  726,  726,  726,  726
    } ;

static yyconst flex_int16_t yy_chk[906] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       14,   16,   18,   19,   19,   19,   19,   19,   19,   19,
       19,   26,   18,   16,   14,   22,   22,   24,   24,   25,

       26,   27,   25,   29,   30,   31,   27,   30,   38,   36,
       30,   32,   39,   29,   38,   25,   25,   36,   32,   52,
       39,   43,   46,   52,   38,   36,  285,  687,   52,   31,
       47,   43,   45,   43,   46,   45,   43,   43,   45,   48,
       47,   45,   53,   55,   45,   54,   87,   53,   56,   48,
      690,   53,   48,   87,   54,   60,   56,   55,   58,   56,
       54,   59,   58,   88,   96,   59,   58,  285,   60,  116,
       88,   60,   59,  116,   96,   59,   73,   73,   73,   73,
       73,   73,   74,   74,   74,   74,   74,   74,   75,   75,
       75,   75,   75,   75,   75,   75,  106,  107,  109,  106,

      112,  132,  148,  109,  691,  132,  107,  121,  112,  112,
      112,  117,  117,  117,  117,  124,  121,  146,  148,  147,
      692,  166,  151,  146,  124,  147,  151,  166,  112,  212,
      300,  212,  117,  693,  300,  694,  695,  117,  151,  158,
      158,  158,  158,  158,  158,  159,  159,  159,  159,  159,
      159,  217,  311,  287,  217,  696,  217,  217,  217,  217,
      378,  697,  700,  217,  217,  287,  217,  701,  702,  378,
      217,  217,  217,  238,  703,  705,  238,  710,  238,  238,
      238,  238,  460,  310,  310,  238,  310,  324,  238,  711,
      327,  324,  238,  310,  327,  379,  406,  310,  310,  460,

      310,  465,  311,  395,  395,  465,  379,  406,  712,  714,
      715,  379,  406,  716,  395,  717,  718,  720,  723,  395,
      727,  727,  728,  729,  729,  686,  685,  683,  682,  680,
      679,  677,  676,  673,  672,  671,  670,  665,  664,  663,
      662,  661,  660,  656,  655,  654,  651,  650,  649,  647,
      646,  645,  644,  643,  642,  641,  640,  639,  635,  633,
      632,  631,  630,  629,  628,  627,  625,  624,  623,  621,
      620,  619,  618,  617,  616,  615,  613,  612,  611,  610,
      609,  608,  607,  606,  605,  604,  603,  601,  600,  599,
      597,  596,  595,  593,  591,  589,  588,  587,  586,  585,

      584,  583,  582,  579,  578,  577,  576,  575,  574,  573,
      572,  571,  570,  569,  566,  565,  564,  563,  562,  561,
      560,  559,  558,  557,  556,  555,  554,  552,  551,  550,
      548,  547,  544,  543,  542,  541,  540,  539,  538,  537,
      535,  534,  533,  532,  531,  530,  529,  528,  527,  526,
      525,  524,  523,  522,  520,  519,  516,  515,  514,  513,
      512,  511,  510,  509,  508,  507,  505,  503,  502,  501,
      500,  499,  498,  497,  496,  495,  494,  492,  491,  490,
      489,  488,  487,  483,  482,  481,  480,  478,  477,  476,
      475,  474,  473,  472,  471,  470,  469,  468,  467,  466,

      463,  462,  461,  459,  458,  457,  456,  455,  454,  453,
      452,  451,  449,  448,  447,  446,  445,  444,  443,  442,
      441,  440,  439,  438,  437,  436,  435,  434,  433,  432,
      431,  429,  428,  427,  426,  423,  421,  418,  417,  416,
      415,  412,  411,  410,  408,  407,  405,  404,  403,  402,
      401,  400,  399,  398,  397,  396,  394,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  381,
      380,  377,  376,  375,  374,  373,  372,  369,  367,  366,
      365,  364,  363,  362,  361,  360,  359,  358,  357,  356,
      354,  350,  348,  347,  345,  344,  343,  342,  341,  340,

      339,  336,  334,  333,  332,  331,  330,  329,  328,  326,
      325,  323,  322,  321,  320,  317,  316,  315,  314,  309,
      308,  307,  306,  305,  304,  303,  302,  301,  299,  298,
      297,  296,  295,  294,  293,  292,  290,  288,  286,  283,
      282,  281,  280,  279,  278,  277,  276,  273,  271,  270,
      269,  268,  267,  266,  265,  264,  262,  260,  257,  256,
      255,  254,  253,  252,  251,  250,  249,  248,  247,  246,
      244,  243,  242,  241,  240,  239,  237,  236,  235,  234,
      233,  232,  231,  229,  228,  226,  225,  224,  223,  222,
      221,  220,  219,  218,  215,  214,  213,  210,  209,  208,

      207,  206,  204,  203,  202,  201,  200,  199,  198,  197,
      196,  195,  194,  192,  191,  190,  189,  188,  187,  186,
      185,  184,  183,  182,  181,  180,  179,  178,  177,  176,
      175,  174,  173,  171,  170,  169,  168,  167,  165,  163,
      162,  161,  160,  156,  154,  153,  152,  150,  149,  145,
      144,  143,  142,  141,  139,  138,  137,  136,  135,  134,
      133,  131,  130,  128,  127,  126,  125,  123,  122,  120,
      119,  118,  115,  114,  113,  111,  110,  108,  105,  104,
      103,  102,  101,  100,   99,   98,   97,   93,   92,   91,
       90,   89,   86,   85,   84,   83,   81,   80,   78,   76,

       72,   71,   67,   65,   62,   57,   51,   50,   49,   44,
       42,   37,   35,   34,   33,   23,   17,   13,   10,    9,
        8,    7,    5,    3,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,

      726,  726,  726,  726,  726
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "taoscanner.ll"
#line 2 "taoscanner.ll"
/* Tao - A software package for sound synthesis with physical models
 * Copyright (C) 1993-1999 Mark Pearson
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include <iostream>
#include <cstdlib>
#include <string>
#include "taoparserdefs.h"
#include "taoparser.h"

int token;
int lineno=1;
int charno=0;
char current_line[256]="";
char idname[256]="";

#define ADDTOLINE \
strcat(current_line,yytext);charno+=strlen(yytext);

#define SAVETOKEN \
yylval.s=new char[strlen(yytext)+1]; \
strcpy(yylval.s, yytext);

extern char current_instr_class[];
extern char current_device_class[];
extern char current_id[];

extern YYSTYPE yylval;

extern int streq(const char *s1, const char *s2);

#line 938 "taoscanner.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 182 "taoscanner.ll"

#line 1122 "taoscanner.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 727 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 825 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 183 "taoscanner.ll"
{
            ADDTOLINE;
            yylval.t=STR;
            SAVETOKEN;
            return AUDIO;
            }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 189 "taoscanner.ll"
{
            ADDTOLINE;
            yylval.t=STR;
            SAVETOKEN;
            return RATE;
            }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 196 "taoscanner.ll"
{
		ADDTOLINE;yylval.t=STR;
		strcpy(current_instr_class, "TaoString");
		SAVETOKEN;return STRING;
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 202 "taoscanner.ll"
{
		ADDTOLINE;yylval.t=STR;
		strcpy(current_instr_class, "TaoRectangle");
		SAVETOKEN;return RECTANGLE;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 207 "taoscanner.ll"
{
		ADDTOLINE;yylval.t=STR;
		strcpy(current_instr_class, "TaoEllipse");
		SAVETOKEN;return ELLIPSE;
		}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 213 "taoscanner.ll"
{
		ADDTOLINE;yylval.t=STR;
		strcpy(current_instr_class, "TaoCircle");
		SAVETOKEN;return CIRCLE;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 219 "taoscanner.ll"
{
		ADDTOLINE;yylval.t=STR;
		strcpy(current_instr_class, "TaoTriangle");
		SAVETOKEN;return TRIANGLE;
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 225 "taoscanner.ll"
{
		ADDTOLINE;yylval.t=STR;
		strcpy(current_device_class, "TaoBow");
		SAVETOKEN;return BOW;
		}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 231 "taoscanner.ll"
{
		ADDTOLINE;yylval.t=STR;
		strcpy(current_device_class, "TaoHammer");
		SAVETOKEN;return HAMMER;
		}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 237 "taoscanner.ll"
{
		ADDTOLINE;yylval.t=STR;
		strcpy(current_device_class, "TaoConnector");
		SAVETOKEN;return CONNECTOR;
		}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 243 "taoscanner.ll"
{
		ADDTOLINE;yylval.t=STR;
		strcpy(current_device_class, "TaoStop");
		SAVETOKEN;return STOP;
		}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 249 "taoscanner.ll"
{
		ADDTOLINE;yylval.t=STR;
		strcpy(current_device_class, "TaoOutput");
		SAVETOKEN;return OUTPUT;
		}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 255 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return STRENGTH;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 256 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return STEREO;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 257 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return MONO;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 258 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return QUAD;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 259 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return PARAM;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 260 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return SIGNAL;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 261 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return COUNTER;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 262 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return INTEGER;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 263 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return FLAG;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 264 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return PRINT;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 265 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return NEWLINEKWD;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 266 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return GETMAGNIFICATION;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 267 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return GETXFREQUENCY;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 268 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return GETYFREQUENCY;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 269 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return SETMAGNIFICATION;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 270 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return SETDAMPING;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 271 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return SETDECAY;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 272 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return RESETDECAY;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 273 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return RESETDAMPING;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 274 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return LOCK;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 275 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return LOCKLEFT;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 276 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return LOCKRIGHT;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 277 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return LOCKTOP;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 278 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return LOCKBOTTOM;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 279 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return LOCKPERIMETER;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 280 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return LOCKCORNERS;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 281 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return LOCKENDS;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 282 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return PLACEAT;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 283 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return PLACEABOVE;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 284 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return PLACEBELOW;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 285 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return PLACELEFTOF;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 286 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return PLACERIGHTOF;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 287 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return JOIN;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 288 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return LABEL;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 289 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return REMOVE;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 290 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return ACTIVATE;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 291 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return DEACTIVATE;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 292 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return GETNAME;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 293 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return GETVELOCITY;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 294 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return GETINITVELOCITY;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 295 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return GETPOSITION;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 296 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return GETMASS;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 297 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return GETGRAVITY;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 298 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return GETHEIGHT;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 299 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return GETDAMPING;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 300 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return GETHARDNESS;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 301 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return GETMAXIMPACTS;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 302 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return GETAMOUNT;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 303 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return NUMBEROFIMPACTS;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 304 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return SETMASS;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 305 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return SETPOSITION;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 306 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return SETVELOCITY;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 307 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return SETINITVELOCITY;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 308 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return SETGRAVITY;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 309 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return SETHEIGHT;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 310 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return SETHARDNESS;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 311 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return SETMAXIMPACTS;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 312 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return SETAMOUNT;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 313 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return RESET;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 314 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return DROP;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 315 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return SETFORCE;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 316 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return GETFORCE;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 317 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return OUTPUTCH;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 318 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return GETINSTRUMENT;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 319 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return APPLYFORCE;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 320 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return CLEAR;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 321 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return ASPITCH;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 322 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return ASOCTAVE;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 323 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return ASFREQUENCY;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 324 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return ASNAME;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 325 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return AND;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 326 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return OR;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 327 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return NOT;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 328 "taoscanner.ll"
{
			ADDTOLINE;
			yylval.i=atoi(yytext);
			yylval.t=INT;
			yylval.f=(float)yylval.i;
			SAVETOKEN;
			return INTLIT;
			}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 336 "taoscanner.ll"
{
			ADDTOLINE;
			yylval.f=atof(yytext);
			yylval.t=FLT;
			SAVETOKEN;
			return FLOATLIT;
			}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 343 "taoscanner.ll"
{
			ADDTOLINE;
			if	(streq(yytext,"left"))	    yylval.f=0.0;
			else if	(streq(yytext,"right"))	    yylval.f=1.0;
			else if	(streq(yytext,"bottom"))    yylval.f=0.0;
			else if	(streq(yytext,"top"))	    yylval.f=1.0;
			else if	(streq(yytext,"centre"))    yylval.f=0.5;
			else if	(streq(yytext,"center"))    yylval.f=0.5;
			yylval.t=FLT;

			SAVETOKEN;
			return POSITIONKWD;
			}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 356 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return FRACTION;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 357 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return MATHFUNC1;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 358 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return MATHFUNC2;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 359 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return LINEAR;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 360 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return EXPON;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 361 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return INIT;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 362 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return TIME;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 363 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return TICK;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 364 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return SCORE;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 365 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return START;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 366 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return END;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 367 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return AT;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 368 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return ATFOR;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 369 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return FROM;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 370 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return BEFORE;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 371 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return AFTER;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 372 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return EVERY;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 373 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return CONTROLRATE;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 374 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return IF;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 375 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return ELSE;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 376 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return ELSEIF;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 377 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return FOR;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 378 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return TO;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 379 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return IN;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 380 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return PITCH;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 381 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return ACCESSPOINT;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 382 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return PITCHUNITS;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 383 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return TIMEUNITS;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 384 "taoscanner.ll"
{
			ADDTOLINE;
			yylval.s=new char[2];
			yylval.i=1;
			strcpy(yylval.s,"1");
			yylval.t=STR;
			return TRUE;
			}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 392 "taoscanner.ll"
{
			ADDTOLINE;
			yylval.s=new char[2];
			yylval.i=0;
			strcpy(yylval.s,"0");
			yylval.t=STR;
			return FALSE;
			}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 400 "taoscanner.ll"
{
			ADDTOLINE;yylval.t=STR;
			strcpy(current_id, yytext);
			SAVETOKEN;return ID;
			}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 405 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return STRLIT;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 406 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return INCDEC;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 407 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return SHIFTOP;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 408 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return RELOP;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 409 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return EQUALITY;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 410 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return ASSIGNOP;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 411 "taoscanner.ll"
{
			    ADDTOLINE;
			}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 414 "taoscanner.ll"
{
			ADDTOLINE;
			lineno++;
			current_line[0]='\0';
			charno=0;
			}
	YY_BREAK
case 128:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 420 "taoscanner.ll"
{
			ADDTOLINE;
			}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 423 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return ',';}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 424 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return ';';}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 425 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return '{';}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 426 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return '}';}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 427 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return '(';}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 428 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return ')';}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 429 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return '[';}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 430 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return ']';}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 431 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return ':';}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 432 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return '.';}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 433 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return '=';}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 434 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return '+';}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 435 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return '-';}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 436 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return '*';}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 437 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return '/';}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 438 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return '%';}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 439 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return '&';}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 440 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return '|';}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 441 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return '~';}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 442 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return '^';}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 443 "taoscanner.ll"
{ADDTOLINE;yylval.t=STR;SAVETOKEN;return ELLIPSIS;}	
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 445 "taoscanner.ll"
ECHO;
	YY_BREAK
#line 2061 "taoscanner.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 727 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 727 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 726);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 445 "taoscanner.ll"



int yywrap()
    {
    return 1;
    }


/*
main()
    {
    int token;

    do
        {
        token=yylex();
            std::cout << "token is " << token << " text is " << yytext << std::endl;
        } while(token!=EOF);
    }
*/

